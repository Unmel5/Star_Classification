# Importing necessary libraries
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import classification_report, confusion_matrix

# Define the dataset path
dataset_path = '/Users/melisaunlu/Library/Mobile Documents/com~apple~CloudDocs/Downloads/star_classification 2.csv'

# Load the dataset
data = pd.read_csv(dataset_path)

# Display basic dataset information
print(f"Dataset Shape: {data.shape}")
print(data.head())

# Visualize dataset feature distributions
columns_to_plot = ['alpha', 'delta', 'u', 'g', 'r', 'i', 'z', 'redshift']
data[columns_to_plot].hist(figsize=(15, 10), bins=30, edgecolor='black')
plt.suptitle("Feature Distributions", fontsize=16)
plt.tight_layout()
plt.show()

# Data preprocessing
# Drop irrelevant columns
X = data.drop(['class', 'obj_ID', 'fiber_ID', 'run_ID', 'rerun_ID', 'cam_col', 'field_ID'], axis=1)
y = data['class']

# Encode the target labels (GALAXY, QSO, STAR)
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the input features for better performance
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Feature ranking using Random Forest
rf = RandomForestClassifier(n_estimators=50, random_state=42)
rf.fit(X_train, y_train)

# Extract feature importances
importances = rf.feature_importances_
sorted_indices = np.argsort(importances)[::-1]

# Plot top 10 features by importance
plt.figure(figsize=(10, 6))
plt.barh(X.columns[sorted_indices][:10], importances[sorted_indices][:10])
plt.xlabel("Feature Importance")
plt.ylabel("Features")
plt.title("Top 10 Features for Stellar Classification")
plt.gca().invert_yaxis()
plt.show()

# Select the top 10 features
top_features = X.columns[sorted_indices][:10]
X_train_top10 = X_train[:, sorted_indices[:10]]
X_test_top10 = X_test[:, sorted_indices[:10]]

# Build and train a neural network using top 10 features
y_train_cat = to_categorical(y_train)
y_test_cat = to_categorical(y_test)

# Define the neural network model
model = Sequential([
    Dense(128, activation='relu', input_dim=X_train_top10.shape[1]),
    Dense(64, activation='relu'),
    Dense(y_train_cat.shape[1], activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train_top10, y_train_cat, validation_split=0.2, epochs=10, batch_size=32, verbose=1)

# Evaluate the model
loss, accuracy = model.evaluate(X_test_top10, y_test_cat, verbose=0)
print(f"Neural Network Test Accuracy with Top 10 Features: {accuracy * 100:.2f}%")

# Predict and analyze results
y_pred = model.predict(X_test_top10)
y_pred_classes = np.argmax(y_pred, axis=1)

# Classification report
classification_report_result = classification_report(y_test, y_pred_classes, target_names=label_encoder.classes_)
print("\nClassification Report:")
print(classification_report_result)

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred_classes)
plt.figure(figsize=(8, 6))
plt.imshow(conf_matrix, cmap='Blues', interpolation='nearest')
plt.title("Confusion Matrix")
plt.colorbar()
plt.xlabel("Predicted Class")
plt.ylabel("True Class")
plt.xticks(ticks=np.arange(3), labels=label_encoder.classes_)
plt.yticks(ticks=np.arange(3), labels=label_encoder.classes_)
plt.show()

# Plot training and validation accuracy
plt.figure(figsize=(8, 6))
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title("Model Accuracy Over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()
